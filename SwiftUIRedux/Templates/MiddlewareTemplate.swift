//
//  CustomMiddleware.swift
//  YourProjectName
//
//  Created by You on Date.
//

import Foundation
import ReduxCore

/// Example middleware for handling API calls
/// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º StateReducer
/// –ü—Ä–∏–∫–ª–∞–¥ middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ API –≤–∏–∫–ª–∏–∫—ñ–≤
/// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º StateReducer
struct APIMiddleware {
    
    /// Create middleware instance
    /// –°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä middleware
    func middleware() -> Middleware<AppState> {
        return { dispatch, action, oldState, newState in
            
            // TODO: Handle your custom actions
            // TODO: –û–±—Ä–æ–±—ñ—Ç—å –≤–∞—à—ñ –∫–∞—Å—Ç–æ–º–Ω—ñ –¥—ñ—ó
            switch action {
            case is Actions.StartLoading:
                print("üîÑ Starting API call...")
                
                // Simulate API call
                // –°–∏–º—É–ª—è—Ü—ñ—è API –≤–∏–∫–ª–∏–∫—É
                DispatchQueue.global().asyncAfter(deadline: .now() + 2.0) {
                    // Simulate success
                    // –°–∏–º—É–ª—è—Ü—ñ—è —É—Å–ø—ñ—Ö—É
                    let mockData = ["Item 1", "Item 2", "Item 3"]
                    DispatchQueue.main.async {
                        dispatch(Actions.LoadingFinished(items: mockData))
                    }
                }
                
            case let action as Actions.LoadingFinished:
                print("‚úÖ API call successful: \(action.items)")
                
            case let action as Actions.AddSingleItem:
                print("‚ûï Adding item: \(action.item)")
                
            case is Actions.ClearItems:
                print("üóëÔ∏è Clearing all items")
                
            default:
                // Do nothing for other actions
                // –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –¥—ñ–π
                break
            }
        }
    }
}

/// Example middleware for logging user actions
/// –ü—Ä–∏–∫–ª–∞–¥ middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
struct UserActionMiddleware {
    
    func middleware() -> Middleware<AppState> {
        return { dispatch, action, oldState, newState in
            
            // Log user interactions
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            switch action {
            case is Actions.StartLoading:
                print("üëÜ User started loading data")
                
            case let action as Actions.AddSingleItem:
                print("üëÜ User added item: \(action.item)")
                
            case is Actions.ClearItems:
                print("üëÜ User cleared all items")
                
            default:
                break
            }
        }
    }
}

// MARK: - Usage Example
// MARK: - –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

/*
 How to use these middlewares in your App.swift:
 –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ middleware –≤ –≤–∞—à–æ–º—É App.swift:
 
 private let store = ObservableStore<AppState>(
     store: Store<AppState>(
         state: AppState.initial,
         reducer: AppState.reduce,  // ‚úÖ –ù–æ–≤–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞
         middlewares: [
             DebugLogMiddleware<AppState>().middleware(),  // From ReduxCore
             APIMiddleware().middleware(),                 // Your custom middleware
             UserActionMiddleware().middleware()           // Your custom middleware
         ]
     )
 )
 */
